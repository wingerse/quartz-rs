#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum BannerPattern {
    BottomStripe,
    TopStripe,
    LeftStripe,
    RightStripe,
    CenterStripeVertical,
    MiddleStripeHorizontal,
    DownRightStripe,
    DownLeftStripe,
    SmallVerticalStripes,
    DiagonalCross,
    SquareCross,
    LeftOfDiagonal,
    RightOfUpsideDownDiagonal,
    LeftOfUpsideDownDiagonal,
    RightOfDiagonal,
    VerticalHalfLeft,
    VerticalHalfRight,
    HorizontalHalfTop,
    HorizontalHalfBottom,
    BottomLeftCorner,
    BottomRightCorner,
    TopLeftCorner,
    TopRightCorner,
    BottomTriangle,
    TopTriangle,
    BottomTriangleSawtooth,
    TopTriangleSawtooth,
    MiddleCircle,
    MiddleRhombus,
    Border,
    CurlyBorder,
    Brick,
    Gradient,
    GradientUpsideDown,
    Creeper,
    Skull,
    Flower,
    Mojang,
}

impl BannerPattern {
    pub fn to_name(&self) -> &'static str {
        use self::BannerPattern::*;
        match *self {
            BottomStripe => "bs",
            TopStripe => "ts",
            LeftStripe => "ls",
            RightStripe => "rs",
            CenterStripeVertical => "cs",
            MiddleStripeHorizontal => "ms",
            DownRightStripe => "drs",
            DownLeftStripe => "dls",
            SmallVerticalStripes => "ss",
            DiagonalCross => "cr",
            SquareCross => "sc",
            LeftOfDiagonal => "ld",
            RightOfUpsideDownDiagonal => "rud",
            LeftOfUpsideDownDiagonal => "lud",
            RightOfDiagonal => "rd",
            VerticalHalfLeft => "vh",
            VerticalHalfRight => "vhr",
            HorizontalHalfTop => "hh",
            HorizontalHalfBottom => "hhb",
            BottomLeftCorner => "bl",
            BottomRightCorner => "br",
            TopLeftCorner => "tl",
            TopRightCorner => "tr",
            BottomTriangle => "bt",
            TopTriangle => "tt",
            BottomTriangleSawtooth => "bts",
            TopTriangleSawtooth => "tts",
            MiddleCircle => "mc",
            MiddleRhombus => "mr",
            Border => "bo",
            CurlyBorder => "cbo",
            Brick => "bri",
            Gradient => "gra",
            GradientUpsideDown => "gru",
            Creeper => "cre",
            Skull => "sku",
            Flower => "flo",
            Mojang => "moj",
        }
    }

    pub fn from_name(name: &str) -> Option<Self> {
        use self::BannerPattern::*;
        match name {
            "bs" => Some(BottomStripe),
            "ts" => Some(TopStripe),
            "ls" => Some(LeftStripe),
            "rs" => Some(RightStripe),
            "cs" => Some(CenterStripeVertical),
            "ms" => Some(MiddleStripeHorizontal),
            "drs" => Some(DownRightStripe),
            "dls" => Some(DownLeftStripe),
            "ss" => Some(SmallVerticalStripes),
            "cr" => Some(DiagonalCross),
            "sc" => Some(SquareCross),
            "ld" => Some(LeftOfDiagonal),
            "rud" => Some(RightOfUpsideDownDiagonal),
            "lud" => Some(LeftOfUpsideDownDiagonal),
            "rd" => Some(RightOfDiagonal),
            "vh" => Some(VerticalHalfLeft),
            "vhr" => Some(VerticalHalfRight),
            "hh" => Some(HorizontalHalfTop),
            "hhb" => Some(HorizontalHalfBottom),
            "bl" => Some(BottomLeftCorner),
            "br" => Some(BottomRightCorner),
            "tl" => Some(TopLeftCorner),
            "tr" => Some(TopRightCorner),
            "bt" => Some(BottomTriangle),
            "tt" => Some(TopTriangle),
            "bts" => Some(BottomTriangleSawtooth),
            "tts" => Some(TopTriangleSawtooth),
            "mc" => Some(MiddleCircle),
            "mr" => Some(MiddleRhombus),
            "bo" => Some(Border),
            "cbo" => Some(CurlyBorder),
            "bri" => Some(Brick),
            "gra" => Some(Gradient),
            "gru" => Some(GradientUpsideDown),
            "cre" => Some(Creeper),
            "sku" => Some(Skull),
            "flo" => Some(Flower),
            "moj" => Some(Mojang),
            _ => None,
        }
    }
}